pipeline {
    agent any
    parameters {
        string(name: 'BUCKET', defaultValue: 'labacicdterraform', description: 'AWS bucket for tf.state')
        string(name: 'IAM_ROLE', defaultValue: 'labacicd_admin_role', description: 'AWS IAM role')
        string(name: 'ARTIFACT_BUCKET', defaultValue: 'labacicd-artifact-bucket', description: 'Name of the bucket to which upload artifacts')
    }
    stages {
        stage('Build artifact') {
            steps {
                step([$class: 'WsCleanup'])
                git branch: 'master',
                url: 'https://github.com/Blueberry95/java_test.git'
                sh("mvn package && cp ./target/*.war ${WORKSPACE}/artifact_${BUILD_NUMBER}.war")
            }
        }
        stage('Create test VM') {
            steps {
                git branch: 'master',
                url: 'https://github.com/Blueberry95/laba_cicd.git'
                dir ('terraform/staging') { 
                    sh("mkdir .ssh && chmod 700 .ssh && chmod 700 .ssh && ssh-keygen -b 2048 -t rsa -f .ssh/ssh_key -q -N \"\" && chmod 600 .ssh/ssh_key")
                    sh("terraform init -backend-config=\"bucket=${params.BUCKET}\" && terraform apply -var \"key_name=build_${BUILD_NUMBER}\" -var \"path_to_key=.ssh/ssh_key\" -var \"key_name_pub=\$(cat .ssh/ssh_key.pub)\" -var \"bucket=${params.BUCKET}\"  -var \"artifact_path=${WORKSPACE}/artifact_${BUILD_NUMBER}.war\"  -auto-approve")
                }
            }
        }
        stage('Test application') {
            steps {
                dir ('terraform/staging') { 
                    sleep 60
                    retry(10) {
                        sh('IP=$(terraform output instance_private_ip) && scp -o StrictHostKeyChecking=no -i .ssh/ssh_key ${WORKSPACE}/artifact_${BUILD_NUMBER}.war ubuntu@${IP}:/opt/tomcat/webapps/SampleWebApplication.war')
                    }
                    retry(10) {
                        sleep 10
                        sh('IP=$(terraform output instance_private_ip) && curl $IP:8080/SampleWebApplication/ -I --fail')
                    }
                } 
            }
        }
        stage('Upload to s3') {
            steps{
                withAWS(role:"${params.IAM_ROLE}") {
                    s3Upload(pathStyleAccessEnabled: true, payloadSigningEnabled: true, file:"${WORKSPACE}/artifact_${BUILD_NUMBER}.war", bucket:"${params.ARTIFACT_BUCKET}", path:"artifact_${BUILD_NUMBER}.war")
                }
            }
        }
    }
    post {
        always('Remove test VM') {
            dir ('terraform/staging') { 
                sh("terraform destroy  -var \"key_name=build_${BUILD_NUMBER}\" -var \"path_to_key=.ssh/ssh_key\" -var \"key_name_pub=\$(cat .ssh/ssh_key.pub)\" -var \"bucket=${params.BUCKET}\"  -var \"artifact_path=${WORKSPACE}/artifact_${BUILD_NUMBER}.war\"  -auto-approve")
            }
            cleanWs()
        }
        success {
            echo "artifact created and uploaded: artifact_${BUILD_NUMBER}.war"
        }
    }
} 